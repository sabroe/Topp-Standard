/*
 * Project: Topp Grasp
 * GitHub: https://github.com/sabroe/Topp-Grasp
 *
 * Copyright 2022-2025 Morten Sabroe Mortensen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins.withType(JavaPlugin) {
    def defaultEncoding = custom['java.default-encoding']?:'UTF-8'

    compileJava {
        options.encoding = defaultEncoding
    }

    compileTestJava {
        options.encoding = defaultEncoding
    }

    java {
        def sourceJavaVersionString = (custom['java.language-version.source'] as String)?.trim()
        def targetJavaVersionString = (custom['java.language-version.target'] as String)?.trim()
        def toolChainJavaVersionString = (custom['java.language-version.tool-chain'] as String)?.trim()
        def javaVersionString = (custom['java.language-version'] as String)?.trim()

        def resolvedLanguageVersion = null
        if (toolChainJavaVersionString && toolChainJavaVersionString != "*" && toolChainJavaVersionString != "!") {
            resolvedLanguageVersion = JavaLanguageVersion.of(Integer.parseInt(toolChainJavaVersionString))
        } else if (toolChainJavaVersionString == "!")  {
            def defaultJavaVersion = javaVersionString ? javaVersionString : JavaVersion.VERSION_21.majorVersion
            resolvedLanguageVersion = JavaLanguageVersion.of(Integer.parseInt(defaultJavaVersion))
        }

        sourceCompatibility = sourceJavaVersionString ? JavaVersion.toVersion(sourceJavaVersionString) : (javaVersionString ? JavaVersion.toVersion(javaVersionString) : JavaVersion.VERSION_21)
        targetCompatibility = targetJavaVersionString ? JavaVersion.toVersion(targetJavaVersionString) : (javaVersionString ? JavaVersion.toVersion(javaVersionString) : JavaVersion.VERSION_21)

        toolchain {
            if (resolvedLanguageVersion != null) {
                languageVersion = resolvedLanguageVersion
            }
        }
    }

    javadoc {
        /*
         * See
         *     https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
         */

        failOnError = false
        options.encoding = defaultEncoding

        options.author = (custom['javadoc.author'] ?: true) as Boolean
        options.version = (custom['javadoc.version'] ?: true) as Boolean
        options.use = (custom['javadoc.use'] ?: false) as Boolean
        options.noDeprecatedList = (custom['javadoc.no-deprecated-list'] ?: false) as Boolean
        options.noSince = (custom['javadoc.no-since'] ?: false) as Boolean

        options.addBooleanOption('Xdoclint:all', (custom['javadoc.x.doclint.all'] ?: true) as Boolean)
        options.addBooleanOption('Xdoclint:none', (custom['javadoc.x.doclint.none'] ?: false) as Boolean)

        options.addBooleanOption('Xdoclint:accessibility', (custom['javadoc.x.doclint.accessibility'] ?: false) as Boolean)
        options.addBooleanOption('Xdoclint:html', (custom['javadoc.x.doclint.html'] ?: false) as Boolean)
        options.addBooleanOption('Xdoclint:missing', (custom['javadoc.x.doclint.missing'] ?: false) as Boolean)
        options.addBooleanOption('Xdoclint:reference', (custom['javadoc.x.doclint.reference'] ?: false) as Boolean)
        options.addBooleanOption('Xdoclint:syntax', (custom['javadoc.x.doclint.syntax'] ?: false) as Boolean)

        options.addStringOption('Xmaxerrs', (custom['javadoc.x.maxerrs'] ?: '25').toString())
        options.addStringOption('Xmaxwarns', (custom['javadoc.x.maxwarns'] ?: '25').toString())
    }
}

tasks.withType(JavaCompile) {
    (custom['java.compiler.default-args']?:"").tokenize(' ').forEach() {options.compilerArgs << it }
    (custom['java.compiler.module-specific-args']?:"").tokenize(' ').forEach() {options.compilerArgs << it }

    options.javaModuleVersion = provider { project.version }
}
