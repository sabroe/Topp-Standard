-- Multiple resource nodes in URL-scanners
-- ZIP file access, ResourceLoader
-- ResourceName
-- ResourceProvider, StandardResourceProvider, service-locater based, own composition
-- Static index-file, META-INF/indexes/
-- URL-scanner matching, by protocol only, by protocol and is-dir/has-jar-suffix,
-- Local "memory:"-URL scheme, constructed indexes
-- Resource-filtering, +/- root, +/-dir, +/-file, +/-after prefix and/or reg-ex
-- Resource-filtering, existence
-- Cached index
-- Reference to other solutions of this same type
-- Tests, just very basic
-- Code-coverage

jar:file:/path/to/myfile.zip!/resource.txt
jar:classpath:/myfile.jar!/com/example/MyClass.class
jar:jar:<outer-url>!/<inner-zip>!/<resource> (ZIP inside ZIP)
jar:jar:file:/path/to/outer.zip!/inner.zip!/resource.txt

import java.net.URL;
import java.io.InputStream;

public class NestedZipExample {
    public static void main(String[] args) throws Exception {
        URL url = new URL("jar:jar:file:/path/to/outer.zip!/inner.zip!/resource.txt");
        try (InputStream is = url.openStream()) {
            byte[] content = is.readAllBytes();
            System.out.println(new String(content));
        }
    }
}

