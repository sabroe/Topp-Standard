/*
 * Project: Topp Standard
 * GitHub: https://github.com/sabroe/Topp-Standard
 *
 * Copyright 2024-2025 Morten Sabroe Mortensen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'java-library-distribution'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

dependencies {
    api 'jakarta.jms:jakarta.jms-api:3.1.0'
    api('org.apache.activemq:artemis-jms-client:2.42.0') {
        exclude group: 'org.apache.activemq', module: 'artemis-core-client'
        exclude group: 'org.apache.activemq', module: 'artemis-commons'
        exclude group: 'org.apache.activemq', module: 'artemis-selector'
        exclude group: 'org.slf4j', module: 'slf4j-ext'
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    // Explicitly include for patching
    implementation 'org.apache.activemq:artemis-core-client:2.42.0'
    implementation 'org.apache.activemq:artemis-commons:2.42.0'
    // Replace slf4j-ext with logback-classic
    implementation 'ch.qos.logback:logback-classic:1.5.12'
}

configurations {
    compileClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: 'org.slf4j', module: 'slf4j-ext'
        exclude group: 'org.apache.activemq', module: 'artemis-selector'
    }
    runtimeClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: 'org.slf4j', module: 'slf4j-ext'
        exclude group: 'org.apache.activemq', module: 'artemis-selector'
    }
    testCompileClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: 'org.slf4j', module: 'slf4j-ext'
        exclude group: 'org.apache.activemq', module: 'artemis-selector'
    }
    testRuntimeClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: 'org.slf4j', module: 'slf4j-ext'
        exclude group: 'org.apache.activemq', module: 'artemis-selector'
    }
}

java {
    modularity.inferModulePath = true
}

tasks.withType(JavaCompile) {
    // Debug: Print the classpath and module path
    doFirst {
        println "CompileClasspath JARs: ${configurations.compileClasspath.collect { it.name }.join(', ')}"
        println "ModulePath: ${configurations.compileClasspath.asPath}"
    }
    def patchPath = configurations.compileClasspath
            .filter { it.name.contains('artemis-core-client-2.42.0') || it.name.contains('artemis-commons-2.42.0') }
            .collect { it.absolutePath }
            .join(File.pathSeparator)
    if (!patchPath.isEmpty()) {
        println "Patching artemis.jms.client with: ${patchPath}"
        options.compilerArgs += [
                '--module-path', configurations.compileClasspath.asPath,
                '--patch-module', "artemis.jms.client=${patchPath}"
        ]
    } else {
        println "Warning: No matching JARs found for patching artemis-core-client or artemis-commons"
        options.compilerArgs += [
                '--module-path', configurations.compileClasspath.asPath
        ]
    }
    options.encoding = 'UTF-8'
    // Debug: Print compiler args
    println "Compiler Args: ${options.compilerArgs}"
}

tasks.withType(Javadoc) {
    options.modulePath = sourceSets.main.compileClasspath
}
