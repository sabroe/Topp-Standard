/*
 * Project: Topp Standard
 * GitHub: https://github.com/sabroe/Topp-Standard
 *
 * Copyright 2024-2025 Morten Sabroe Mortensen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.yelstream.topp.standard.xml.bind;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.PropertyException;
import jakarta.xml.bind.ValidationEventHandler;
import jakarta.xml.bind.annotation.adapters.XmlAdapter;
import jakarta.xml.bind.attachment.AttachmentMarshaller;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.experimental.UtilityClass;

import javax.xml.validation.Schema;
import java.util.Map;

/**
 * Utility addressing instances of {@link Marshaller}.
 * @author Morten Sabroe Mortensen
 * @version 1.0
 * @since 2022-04-20
 */
@UtilityClass
public class Marshallers {

    @Getter
    @AllArgsConstructor(staticName="of")
    public static final class PropertyName {
        private final String name;

        public void set(Marshaller marshaller,
                        Object value) {
            setProperty(marshaller,name,value);
        }

        public Object get(Marshaller marshaller) {
            return getProperty(marshaller,name);
        }
    }

    /**
     * Standard marshalling properties.
     * <p>
     *     See <a href="https://jakarta.ee/specifications/xml-binding/4.0/jakarta-xml-binding-spec-4.0#marshalling-properties">Jakarta XML Binding, 4.5.2. Marshalling Properties</a>.
     * </p>
     */
    @Getter
    @AllArgsConstructor
    @SuppressWarnings("java:S115")
    public enum StandardPropertyName {
        /**
         * Output character encoding.
         * If the property is not specified, it defaults to "UTF-8".
         */
        Encoding(PropertyName.of(Marshaller.JAXB_ENCODING)),

        /**
         * Indicates, if output is formatted into readable, indented XML data.
         */
        Formatted(PropertyName.of(Marshaller.JAXB_FORMATTED_OUTPUT)),

        /**
         * Specifies an {@code xsi:schemaLocation} attribute to be output in the generated XML data.
         */
        SchemaLocation(PropertyName.of(Marshaller.JAXB_SCHEMA_LOCATION)),

        /**
         * Specifies an {@code xsi:noNamespaceSchemaLocation } attribute to be output in the generated XML data.
         */
        NoNamespaceSchemaLocation(PropertyName.of(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION)),

        /**
         * Determines whether document level events will be generated by the Marshaller.
         * Defaults to false.
         */
        Fragment(PropertyName.of(Marshaller.JAXB_FRAGMENT));

        private final PropertyName name;
    }

    public void setProperty(Marshaller marshaller,
                            String name,
                            Object value) {
        try {
            marshaller.setProperty(name, value);
        } catch (PropertyException ex) {
            throw new IllegalArgumentException("Failure to set marshaller property; name is %s!".formatted(name),ex);
        }
    }

    public Object getProperty(Marshaller marshaller,
                              String name) {
        try {
            return marshaller.getProperty(name);
        } catch (PropertyException ex) {
            throw new IllegalArgumentException("Failure to get marshaller property; name is %s!".formatted(name),ex);
        }
    }

    /**
     * Creates a marshaller.
     * @param context JAXB context.
     * @return Marshaller.
     * @throws JAXBException Thrown in case of JAXB error.
     */
    public static Marshaller createMarshaller(JAXBContext context) throws JAXBException {
        return createMarshaller(context, null);
    }

    /**
     * Creates a marshaller.
     * @param context JAXB context.
     * @param schema Schema.
     * @return Marshaller.
     * @throws JAXBException Thrown in case of JAXB error.
     */
    public static Marshaller createMarshaller(JAXBContext context,
                                              Schema schema) throws JAXBException {
        Marshaller marshaller=context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  //TO-DO: Make this conditional?
        if (schema!=null) {
            marshaller.setSchema(schema);
        }
        return marshaller;
    }

    //TO-DO: Add enabling of basic pretty-print!
    //TO-DO: Add NamespacePrefixMapper! Note that 'org.glassfish.jaxb.runtime.marshaller.NamespacePrefixMapper' is glassfish-specific!
    //TO-DO: Add Lombok builder of Marshaller
    //TO-DO: Add properties!
    //TO-DO: Add event-handler ValidationEventHandler !
    //TO-DO: Add adapter !
    //TO-DO: Add attachment marshaller AttachmentMarshaller !
    //TO-DO: Add schema!
    //TO-DO: Add listener!

    @lombok.Builder(builderClassName="Builder")
    private static Marshaller createMarshallerByBuilder(JAXBContext context,
                                                        Map<String,Object> properties,
                                                        Schema schema,
                                                        ValidationEventHandler eventHandler,
                                                        XmlAdapter<?,?> adapter,
                                                        Marshaller.Listener listener,
                                                        AttachmentMarshaller attachmentMarshaller) throws JAXBException {
        Marshaller marshaller=context.createMarshaller();
        if (properties!=null) {
            properties.forEach((name,value)->setProperty(marshaller,name,value));
        }
        if (schema!=null) {
            marshaller.setSchema(schema);
        }
        if (eventHandler!=null) {
            marshaller.setEventHandler(eventHandler);
        }
        if (adapter!=null) {
            marshaller.setAdapter(adapter);
        }
        if (listener!=null) {
            marshaller.setListener(listener);
        }
        if (attachmentMarshaller!=null) {
            marshaller.setAttachmentMarshaller(attachmentMarshaller);
        }
        return marshaller;
    }
}
