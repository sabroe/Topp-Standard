/*
 * Project: Topp Grasp
 * GitHub: https://github.com/sabroe/Topp-Grasp
 *
 * Copyright 2022-2025 Morten Sabroe Mortensen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

plugins {
    id "org.sonarqube" version "5.1.0.4882" apply false  //See https://plugins.gradle.org/plugin/org.sonarqube
    id "checkstyle"
    id "jacoco"
    id "de.obqo.decycle" version "1.2.4" apply false
//    id 'org.cyclonedx.bom' version '3.0.0-alpha-1' apply false  //See https://plugins.gradle.org/plugin/org.cyclonedx.bom
    id 'org.cyclonedx.bom' version '2.0.0' apply false  //See https://plugins.gradle.org/plugin/org.cyclonedx.bom
    id "com.gorylenko.gradle-git-properties" version "2.5.3" apply false
}

def fragmentDir = "${rootProject.projectDir}/gradle/fragment"
//apply from: "${fragmentDir}/custom-properties.gradle"
//apply from: "https://raw.githubusercontent.com/sabroe/Topp-Grasp/refs/heads/main/template/root/gradle/fragment/custom-properties.gradle"
//apply from: "${fragmentDir}/custom-properties-2.gradle"
//apply from: "${fragmentDir}/custom-properties-2.gradle.kts"
apply from: "${fragmentDir}/custom-properties-3.gradle.kts"

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url = 'https://projectlombok.org/edge-releases' }
    }
    apply from: "${fragmentDir}/project-report.gradle"
}

subprojects {
    apply from: "${fragmentDir}/checkstyle.gradle"
    apply from: "${fragmentDir}/jacoco.gradle"
    apply from: "${fragmentDir}/java-options.gradle"
    apply from: "${fragmentDir}/java-jars.gradle"
    apply from: "${fragmentDir}/jar-manifest.gradle"
    apply from: "${fragmentDir}/archive-naming.gradle"
    apply from: "${fragmentDir}/publish.gradle"
    apply from: "${fragmentDir}/sonarqube.gradle"
    apply from: "${fragmentDir}/lombok.gradle"
    apply from: "${fragmentDir}/slf4j.gradle"
    apply from: "${fragmentDir}/junit.gradle"
    apply from: "${fragmentDir}/decycle.gradle"
    apply from: "${fragmentDir}/cyclonedx.gradle"
    apply from: "${fragmentDir}/git-properties.gradle"
}

subprojects {project ->
    project.plugins.withType(JavaPlugin) {
//    project.plugins.withId('java') {
        project.tasks.register("conservativeBuild") {
            description 'Runs clean and build with warnings enabled, excluding test and javadoc tasks.'
            group 'build'

            dependsOn project.tasks.named('clean')
            dependsOn project.tasks.named('build')

/*
            project.tasks.named('build').configure {
                it.setProperty('excludes', ['test', 'javadoc'])
            }
*/
/*
            doFirst {
                project.tasks.named('test').configure { it.enabled = false }
                project.tasks.named('javadoc').configure { it.enabled = false }
            }
*/
/*
            doFirst {
                project.tasks.named('test').get().enabled = false
                project.tasks.named('javadoc').get().enabled = false
                logger.lifecycle("Disabled test task: ${project.tasks.named('test').get().enabled}")
                logger.lifecycle("Disabled javadoc task: ${project.tasks.named('javadoc').get().enabled}")
            }
*/
            project.gradle.taskGraph.whenReady { graph ->
                if (graph.hasTask(project.tasks.conservativeBuild)) {
                    project.tasks.named('test').get().enabled = false
                    project.tasks.named('javadoc').get().enabled = false
                }
            }

            doLast {
                project.gradle.startParameter.warningMode = org.gradle.api.logging.configuration.WarningMode.All
            }
        }
    }
}

/*
 Note:
    To get a page with report links, consider executing this:
    $ find . -name "*.html" | grep -E "/build/(docs|reports)/[^.]+/[[:alnum:]]+[.]html"
 */
